name: Release GitHub Action

on:
  workflow_dispatch:
    inputs:
      version_branch:
        description: "The version development branch (e.g., v1-dev)"
        required: true
        default: "v1-dev"
      release_type:
        description: "Type of version update"
        required: true
        default: "minor"
        type: choice
        options:
          - minor
          - major

jobs:
  validate_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Validate branch format
        run: |
          # Check if branch follows the v{number}-dev pattern
          if ! [[ "${{ github.event.inputs.version_branch }}" =~ ^v[0-9]+-dev$ ]]; then
            echo "::error::Invalid branch format. Branch must be in the format v{number}-dev (e.g., v1-dev, v2-dev)"
            exit 1
          fi

      - name: Check if branch exists
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: |
          if ! git show-ref --verify --quiet refs/heads/${{ github.event.inputs.version_branch }}; then
            echo "::error::Branch '${{ github.event.inputs.version_branch }}' does not exist"
            exit 1
          fi

  release:
    needs: validate_branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version_branch }}
          fetch-depth: 0 # Fetch all history for tags

      - name: Set up variables
        id: vars
        run: |
          # Extract major version from branch name
          MAJOR_VERSION=$(echo ${{ github.event.inputs.version_branch }} | sed 's/v\([0-9]*\)-dev/\1/')
          echo "major_version=$MAJOR_VERSION" >> $GITHUB_OUTPUT

          # Get latest minor version for this major version
          LATEST_MINOR=$(git tag -l "v${MAJOR_VERSION}.*" | sort -V | tail -n 1)

          # Determine new version based on release type
          if [ "${{ github.event.inputs.release_type }}" = "major" ]; then
            # For a major version, increment the major version
            NEW_MAJOR=$((MAJOR_VERSION + 1))
            NEW_VERSION="v${NEW_MAJOR}.0"
            echo "Creating new major version: $NEW_VERSION"
            echo "target_major_version=${NEW_MAJOR}" >> $GITHUB_OUTPUT
          else
            # For a minor version update
            if [ -z "$LATEST_MINOR" ]; then
              # No existing versions, start with .0
              NEW_VERSION="v${MAJOR_VERSION}.0"
            else
              # Increment minor version
              MINOR_NUM=$(echo $LATEST_MINOR | sed "s/v${MAJOR_VERSION}\.\([0-9]*\)/\1/")
              NEW_MINOR=$((MINOR_NUM + 1))
              NEW_VERSION="v${MAJOR_VERSION}.${NEW_MINOR}"
            fi
            echo "target_major_version=${MAJOR_VERSION}" >> $GITHUB_OUTPUT
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create version tags
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          echo "Creating new tag: ${{ steps.vars.outputs.new_version }}"
          git tag -f ${{ steps.vars.outputs.new_version }}
          git push origin ${{ steps.vars.outputs.new_version }} --force

          # Update the major version tag
          echo "Updating major version tag: v${{ steps.vars.outputs.target_major_version }} to point to ${{ steps.vars.outputs.new_version }}"
          git tag -f v${{ steps.vars.outputs.target_major_version }} ${{ steps.vars.outputs.new_version }}
          git push origin v${{ steps.vars.outputs.target_major_version }} --force

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.vars.outputs.new_version }}
          tag_name: ${{ steps.vars.outputs.new_version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
